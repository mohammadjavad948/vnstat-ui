const {app, BrowserWindow, ipcMain, Menu, Tray} = require('electron');
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
    app.quit();
}

let mainWindow;
let loadingScreen;
let tray = null;

const createLoadingScreen = () => {
    /// create a browser window
    loadingScreen = new BrowserWindow(Object.assign({
        /// set the window height / width
        width: 250,
        height: 300,
        /// remove the window frame, so it will rendered without frames
        frame: false,
        /// and set the transparency to true, to remove any kind of background
        transparent: true
    }));
    loadingScreen.setResizable(false);
    loadingScreen.loadURL('file://' + __dirname + '/loading-screen/index.html');
    loadingScreen.on('closed', () => loadingScreen = null);
    loadingScreen.webContents.on('did-finish-load', () => {
        loadingScreen.show();
    });
}

const createWindow = () => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: __dirname + '/preload.js',
            nodeIntegration: false,
            contextIsolation: true,
        },
        minHeight: 400,
        minWidth: 600,
        frame: false,
        title: 'vnstat-ui'
    });

    if (process.env.dev){
        // and load the index.html of the app.
        mainWindow.loadURL('http://localhost:3000');

        // Open the DevTools.
        mainWindow.webContents.openDevTools();
    } else {
        // and load the index.html of the app.
        mainWindow.loadFile(__dirname + '/build/index.html');
    }

    mainWindow.on('closed', function () {
        // Dereference the window object, usually you would store windows
        // in an array if your app supports multi windows, this is the time
        // when you should delete the corresponding element.
        mainWindow = null
    });
    mainWindow.webContents.on('did-finish-load', () => {
        /// when the content has loaded, hide the loading screen and show the main window
        if (loadingScreen) {
            loadingScreen.close();
        }
        mainWindow.show();
    });

    mainWindow.removeMenu();

    ipcMain.on('close', () => {
        mainWindow.hide();
    })

    ipcMain.on('un-maximize', () => {
        if (mainWindow.isMaximized()){

            mainWindow.unmaximize();

        } else {
            mainWindow.maximize();
        }
    })

    ipcMain.on('minimize', () => {
        mainWindow.minimize();
    })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
    createLoadingScreen();
    createWindow();
});

app.whenReady().then(() => {
    tray = new Tray('icon.png')
    const contextMenu = Menu.buildFromTemplate([
        { label: 'Vnstat', icon: 'icon.png', enabled: false },
        { type: 'separator' },
        {
            label: 'Open Vnstat',
            click: () => {
                mainWindow.show();
            }
        },
        { type: 'separator' },
        {
            label: 'Quit Vnstat',
            click: () => {
                app.quit();
            }
        },
    ])

    tray.setToolTip('Vnstat')
    tray.setContextMenu(contextMenu)
})